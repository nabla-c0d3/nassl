name: Build Wheels

on:
  push:
    branches: [ release ]
  pull_request:
    branches: [ release ]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-12, windows-2022]

    steps:
      - uses: actions/checkout@v4

      - name: Install Windows 8.1 SDK
        shell: powershell
        run: |
          Invoke-WebRequest -Method Get -Uri https://go.microsoft.com/fwlink/p/?LinkId=323507 -OutFile sdksetup.exe -UseBasicParsing
          Start-Process -Wait sdksetup.exe -ArgumentList "/q", "/norestart", "/features", "OptionId.WindowsDesktopSoftwareDevelopmentKit", "OptionId.NetFxSoftwareDevelopmentKit"
        if: runner.os == 'Windows'

      - name: Install VS 2015 tools for Zlib
        shell: powershell
        run: |
          Invoke-WebRequest -Method Get -Uri https://aka.ms/vs/17/release/vs_enterprise.exe -OutFile vs_enterprise.exe
          Start-Process -Wait vs_enterprise.exe -ArgumentList 'modify', '--installPath "C:\Program Files\Microsoft Visual Studio\2022\Enterprise"', '--add', 'Microsoft.VisualStudio.Component.VC.140', '--quiet', '--norestart', '--wait'
        if: runner.os == 'Windows'

      - uses: actions/setup-python@v5
        name: Install Python

      - name: Install cibuildwheel
        run: python -m pip install "cibuildwheel>=2.16,<2.17"

      # Needed for Linux aarch64 builds
      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: "cp38-* cp39-* cp310-* cp311-* cp312-*"
          CIBW_SKIP: "*-win32 pp* *-musllinux_i686"  # Skip win32, PyPy and muslinux32 builds
          # Build wheels for Apple x86_64 only; we use another workflow for Apple arm64
          CIBW_ARCHS_MACOS: "x86_64"
          # Build manylinux2014 wheels
          CIBW_ARCHS_LINUX: auto aarch64
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_MANYLINUX_I686_IMAGE: manylinux2014
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux2014
          # The C libraries (OpenSSL and Zlib) only need to be built once per OS
          # as they are not tied to a specific Python version
          CIBW_BEFORE_ALL: "python -m pip install invoke && invoke build.deps"
          CIBW_BEFORE_ALL_WINDOWS: '"C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat" && python -m pip install invoke && invoke build.deps'
          # However the nassl C extension is by design tied to a specific Python version
          CIBW_BEFORE_BUILD: "python -m pip install invoke && invoke build.nassl"
          CIBW_TEST_REQUIRES: "pytest"
          CIBW_TEST_COMMAND: "python -m pytest {project}/tests"

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl
